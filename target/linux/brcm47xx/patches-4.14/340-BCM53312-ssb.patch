diff --git a/drivers/ssb/driver_chipcommon.c b/drivers/ssb/driver_chipcommon.c
index 7cb7d2c8fd86..9c6d610522e1 100644
--- a/drivers/ssb/driver_chipcommon.c
+++ b/drivers/ssb/driver_chipcommon.c
@@ -610,7 +610,8 @@ int ssb_chipco_serial_init(struct ssb_chipcommon *cc,
 	unsigned int ccrev = cc->dev->id.revision;
 
 	plltype = (cc->capabilities & SSB_CHIPCO_CAP_PLLT);
-	irq = ssb_mips_irq(cc->dev);
+	// FixMe: ssb_mips_irq(cc->dev) is currently broken, asign statically
+	irq = 1;
 
 	if (plltype == SSB_PLLTYPE_1) {
 		/* PLL clock */
@@ -653,8 +654,10 @@ int ssb_chipco_serial_init(struct ssb_chipcommon *cc,
 			      & SSB_CHIPCO_CLKDIV_UART;
 		} else {
 			/* Fixed internal backplane clock */
-			baud_base = 88000000;
-			div = 48;
+			// Not sure why the ecos source use 133000000
+			// ToDo check ssb_clockspeed
+			baud_base = 100000000;
+			div = 1; //?
 		}
 
 		/* Clock source depends on strapping if UartClkOverride is unset */
diff --git a/drivers/ssb/driver_mipscore.c b/drivers/ssb/driver_mipscore.c
index f87efef42252..41992e768a5a 100644
--- a/drivers/ssb/driver_mipscore.c
+++ b/drivers/ssb/driver_mipscore.c
@@ -72,10 +72,11 @@ static const u32 ipsflag_irq_shift[] = {
 
 static inline u32 ssb_irqflag(struct ssb_device *dev)
 {
-	u32 tpsflag = ssb_read32(dev, SSB_TPSFLAG);
-	if (tpsflag)
-		return ssb_read32(dev, SSB_TPSFLAG) & SSB_TPSFLAG_BPFLAG;
-	else
+	// Disable since the BCM53312 can't access the TPSFLAG
+	//u32 tpsflag = ssb_read32(dev, SSB_TPSFLAG);
+	//if (tpsflag)
+	//      return ssb_read32(dev, SSB_TPSFLAG) & SSB_TPSFLAG_BPFLAG;
+	//else
		/* not irq supported */
		return 0x3f;
 }
diff --git a/drivers/ssb/scan.c b/drivers/ssb/scan.c
index b9429df583eb..651e446dcd69 100644
--- a/drivers/ssb/scan.c
+++ b/drivers/ssb/scan.c
@@ -22,6 +22,18 @@
 
 #include "ssb_private.h"
 
+typedef struct sb_cores_map {
+	char    *core_name;
+	uint    core_base;
+	uint    core_id;
+} sb_cored_map_t;
+
+static sb_cored_map_t bcm56218_cores_map[] = {
+	{ "Chipcommon", 0x18000000, SSB_DEV_CHIPCOMMON   },
+	{ "mips",       0x18005000, SSB_DEV_MIPS },
+	{ "memc",       0x18008000, SSB_DEV_MEMC_SDRAM },
+	{ NULL,         0,          0       },
+};
 
 const char *ssb_core_name(u16 coreid)
 {
@@ -139,6 +151,7 @@ static u8 chipid_to_nrcores(u16 chipid)
 	case 0x4306:
 		return 6;
 	case 0x4310:
+	case 0xC312:
 		return 8;
 	case 0x4307:
 	case 0x4301:
@@ -293,31 +306,21 @@ int ssb_bus_scan(struct ssb_bus *bus,
 	rev |= (idhi & SSB_IDHIGH_RCHI) >> SSB_IDHIGH_RCHI_SHIFT;
 
 	bus->nr_devices = 0;
-	if (cc == SSB_DEV_CHIPCOMMON) {
-		tmp = scan_read32(bus, 0, SSB_CHIPCO_CHIPID);
-
-		bus->chip_id = (tmp & SSB_CHIPCO_IDMASK);
-		bus->chip_rev = (tmp & SSB_CHIPCO_REVMASK) >>
-				SSB_CHIPCO_REVSHIFT;
-		bus->chip_package = (tmp & SSB_CHIPCO_PACKMASK) >>
-				    SSB_CHIPCO_PACKSHIFT;
-		if (rev >= 4) {
-			bus->nr_devices = (tmp & SSB_CHIPCO_NRCORESMASK) >>
-					  SSB_CHIPCO_NRCORESSHIFT;
-		}
-		tmp = scan_read32(bus, 0, SSB_CHIPCO_CAP);
-		bus->chipco.capabilities = tmp;
-	} else {
-		if (bus->bustype == SSB_BUSTYPE_PCI) {
-			bus->chip_id = pcidev_to_chipid(bus->host_pci);
-			bus->chip_rev = bus->host_pci->revision;
-			bus->chip_package = 0;
-		} else {
-			bus->chip_id = 0x4710;
-			bus->chip_rev = 0;
-			bus->chip_package = 0;
-		}
+
+	tmp = scan_read32(bus, 0, SSB_CHIPCO_CHIPID);
+
+	bus->chip_id = (tmp & SSB_CHIPCO_IDMASK);
+	bus->chip_rev = (tmp & SSB_CHIPCO_REVMASK) >>
+			SSB_CHIPCO_REVSHIFT;
+	bus->chip_package = (tmp & SSB_CHIPCO_PACKMASK) >>
+			    SSB_CHIPCO_PACKSHIFT;
+	if (rev >= 4) {
+	bus->nr_devices = (tmp & SSB_CHIPCO_NRCORESMASK) >>
+			  SSB_CHIPCO_NRCORESSHIFT;
 	}
+	tmp = scan_read32(bus, 0, SSB_CHIPCO_CAP);
+	bus->chipco.capabilities = tmp;
+
 	ssb_info("Found chip with id 0x%04X, rev 0x%02X and package 0x%02X\n",
 		 bus->chip_id, bus->chip_rev, bus->chip_package);
 	if (!bus->nr_devices)
@@ -339,26 +342,22 @@ int ssb_bus_scan(struct ssb_bus *bus,
 		bus->mmio = mmio;
 	}
 
-	/* Fetch basic information about each core/device */
-	for (i = 0, dev_i = 0; i < bus->nr_devices; i++) {
-		err = scan_switchcore(bus, i);
-		if (err)
-			goto err_unmap;
+	sb_cored_map_t  *core_map = bcm56218_cores_map;
+	
+	dev_i = 0;
+	while (core_map->core_name) {
 		dev = &(bus->devices[dev_i]);
-
-		idhi = scan_read32(bus, i, SSB_IDHIGH);
-		dev->id.coreid = (idhi & SSB_IDHIGH_CC) >> SSB_IDHIGH_CC_SHIFT;
-		dev->id.revision = (idhi & SSB_IDHIGH_RCLO);
-		dev->id.revision |= (idhi & SSB_IDHIGH_RCHI) >> SSB_IDHIGH_RCHI_SHIFT;
-		dev->id.vendor = (idhi & SSB_IDHIGH_VC) >> SSB_IDHIGH_VC_SHIFT;
-		dev->core_index = i;
+		dev->id.coreid = core_map->core_id;
+		dev->id.revision = 0;
+		dev->id.vendor = 0;
+		dev->core_index = (core_map->core_base - SSB_ENUM_BASE)/ SSB_CORE_SIZE;
 		dev->bus = bus;
 		dev->ops = bus->ops;
 
 		printk(KERN_DEBUG PFX
 			    "Core %d found: %s "
 			    "(cc 0x%03X, rev 0x%02X, vendor 0x%04X)\n",
-			    i, ssb_core_name(dev->id.coreid),
+			    dev->core_index, ssb_core_name(dev->id.coreid),
 			    dev->id.coreid, dev->id.revision, dev->id.vendor);
 
 		switch (dev->id.coreid) {
@@ -432,6 +431,7 @@ int ssb_bus_scan(struct ssb_bus *bus,
 			break;
 		}
 
+		core_map++;
 		dev_i++;
 	}
 	bus->nr_devices = dev_i;
